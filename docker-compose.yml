services:
  game-server:
    build: 
      context: ./server
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - SESSION_SECRET=${SESSION_SECRET}
    networks:
      - game-network
    volumes:
      - game-sessions:/app/sessions
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', res => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    command: redis-server --save 60 1 --loglevel warning
    networks:
      - game-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    environment:
      - REDIS_ADDR=redis://redis:6379
    ports:
      - "9121:9121"
    networks:
      - game-network
    restart: unless-stopped

  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    networks:
      - game-network
    volumes:
      - ./client:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt/:/etc/letsencrypt/:ro
      - ./nginx/secrets/.htpasswd-prometheus:/etc/nginx/.htpasswd-prometheus:ro
    depends_on:
      game-server:
        condition: service_healthy
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.47.2
    networks:
      - game-network
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:v1.7.0
    networks:
      - game-network
    volumes:
      - /:/host:ro,rslave
    pid: host
    privileged: true
    command:
      - '--path.rootfs=/host'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.1.5
    networks:
      - game-network
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SERVER_ROOT_URL=https://grafana.coobe.ru
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
    restart: unless-stopped

volumes:
  redis_data:
  game-sessions:
  prometheus_data:
  grafana_data:

networks:
  game-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/24
          gateway: 172.25.0.1